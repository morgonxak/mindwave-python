{"name":"Mindwave-python","tagline":"Linux and Mac-friendly Python parser to connect and interact with multiple NeuroSky MindWave headsets from one machine.","body":"mindwave-python\r\n===============\r\n\r\nLinux and Mac-friendly Python parser to connect and interact with multiple NeuroSky MindWave headsets from one machine.\r\n\r\nThis is the software used by Dennykim.ml (https://dennykim.ml/) for all of our MindWave projects.\r\n\r\nBasic Usage\r\n-----------\r\n\r\nA connection to the headset dongle is established by creating a new `Headset` object. Find the MindWave device(s) on your machine. On a Mac, it looks like this:\r\n\r\n    import mindwave\r\n    \r\n    headset = mindwave.Headset('/dev/tty.MindWave', '625f')\r\n\r\nPass in the device path and the headset ID printed inside the battery case.\r\n\r\nIt's recommended to wait at least a couple seconds before connecting the dongle to the headset:\r\n\r\n    import mindwave, time\r\n    \r\n    headset = mindwave.Headset('/dev/tty.MindWave', '625f')\r\n    time.sleep(2)\r\n    \r\n    headset.connect()\r\n    print \"Connecting...\"\r\n    \r\n    while headset.status != 'connected':\r\n        time.sleep(0.5)\r\n        if headset.status == 'standby':\r\n            headset.connect()\r\n            print \"Retrying connect...\"\r\n    print \"Connected.\"\r\n    \r\n    while True:\r\n        print \"Attention: %s, Meditation: %s\" % (headset.attention, headset.meditation)\r\n\r\nFor the MindWave Mobile bluetooth headsets, it's unnecessary to use the `connect()` or `disconnect()` methods. If your operating system automatically creates a serial port for the bluetooth device, there's also no need to specify a headset ID. Just pass the serial device path as a parameter when you create a new `Headset` object and you're good to go.\r\n\r\n\r\nAuto-connect\r\n------------\r\n\r\nThe library can also auto-connect the dongle to the first available headset, rather than specifying a headset ID.\r\n\r\n    import mindwave, time\r\n    \r\n    headset = mindwave.Headset('/dev/tty.MindWave')\r\n    time.sleep(2)\r\n    headset.connect()\r\n\r\nUse `headset.autoconnect()` to auto-connect explicitly, regardless of whether or not a headset ID was specified.\r\n\r\n\r\nMultiple headsets\r\n-----------------\r\n\r\nThe library can handle multiple devices used simultaneously.\r\n\r\n    import mindwave, time\r\n    \r\n    h1 = mindwave.Headset('/dev/tty.MindWave', '625f')\r\n    h2 = mindwave.Headset('/dev/tty.MindWave2', 'a662')\r\n    time.sleep(2)\r\n    \r\n    h1.connect()\r\n    print \"Connecting h1...\"\r\n    while h1.status != 'connected':\r\n        time.sleep(0.5)\r\n        if h1.status == 'standby':\r\n            h1.connect()\r\n            print \"Retrying connect...\"\r\n    print \"Connected h1.\"\r\n    \r\n    h2.connect()\r\n    print \"Connecting h2...\"\r\n    while h2.status != 'connected':\r\n        time.sleep(0.5)\r\n        if h2.status == 'standby':\r\n            h2.connect()\r\n            print \"Retrying connect...\"\r\n    print \"Connected h2.\"\r\n    \r\n    while True:\r\n        print \"Attention 1: %s, Meditation 1: %s\" % (h1.attention, h1.meditation)\r\n        print \"Attention 2: %s, Meditation 2: %s\" % (h2.attention, h2.meditation)\r\n\r\n\r\nAdding event handlers\r\n---------------------\r\n\r\nThe library provides hooks for certain events to allow for the attachment of custom handlers.\r\n\r\n    def on_blink(headset, blink_strength):\r\n        print \"Blink detected. Strength: %s\" % blink_strength\r\n    \r\n    headset.blink_handlers.append(on_blink)\r\n\r\n\r\nAPI\r\n===\r\n\r\nAvailable properties\r\n--------------------\r\n\r\n`headset.` **device** - The device path of the dongle on the system.\r\n\r\n`headset.` **headset_id** - The ID of the connected headset.\r\n\r\n`headset.` **poor_signal** - The \"poor signal\" reading of the headset connection. This indicates how poorly the headset is reading EEG waves, 0 being the best reading and 255 being the worst. Try readjusting the headset if this value is too high.\r\n\r\n`headset.` **attention** - The last-read attention value from the headset.\r\n\r\n`headset.` **meditation** - The last-read meditation value from the headset.\r\n\r\n`headset.` **blink** - The last-read blink strength from the headset.\r\n\r\n`headset.` **status** - The current status of the headset: `connected`, `scanning`, or `standby`\r\n\r\n\r\nAvailable methods\r\n-----------------\r\n\r\n`headset.` **connect** `([headset_id])` - Connect to the specified headset ID. If no headset was specified, the dongle will auto-connect to the first available.\r\n\r\n`headset.` **autoconnect** `()` - Auto-connect to the first available headset, regardless of any headset ID specified.\r\n\r\n`headset.` **disconnect** `()` - Disconnect the dongle from the headset.\r\n\r\n\r\nEvent hooks\r\n-----------\r\n\r\n`headset.` **poor_signal_handlers** `[]` - Handlers are fired whenever a poor signal is detected. Expects handlers with the prototype `my_function(headset, poor_signal)` and passes in the current headset object and poor signal value.\r\n\r\n`headset.` **good_signal_handlers** `[]` - Handlers are fired whenever a good signal is detected. Expects handlers with the prototype `my_function(headset, poor_signal)` and passes in the current headset object and poor signal value.\r\n\r\n`headset.` **attention_handlers** `[]` - Handlers are fired whenever an attention value is received. Expects handlers with the prototype `my_function(headset, attention)` and passes in the current headset object and attention value.\r\n\r\n`headset.` **meditation_handlers** `[]` - Handlers are fired whenever an meditation value is received. Expects handlers with the prototype `my_function(headset, meditation)` and passes in the current headset object and meditation value.\r\n\r\n`headset.` **blink_handlers** `[]` - Handlers are fired whenever a blink is detected. Expects handlers with the prototype `my_function(headset, blink_strength)` and passes in the current headset object and blink strength value.\r\n\r\n`headset.` **connected_handlers** `[]` - Handlers are fired whenever the headset is connected. Expects handlers with the prototype `my_function(headset)` and passes in the current headset object.\r\n\r\n`headset.` **notfound_handlers** `[]` - Handlers are fired whenever the headset specified cannot be found. Expects handlers with the prototype `my_function(headset, not_found_id)` and passes in the current headset object and the headset id that could not be found.\r\n\r\n`headset.` **disconnected_handlers** `[]` - Handlers are fired whenever the headset is disconnected. Expects handlers with the prototype `my_function(headset)` and passes in the current headset object.\r\n\r\n`headset.` **request_denied_handlers** `[]` - Handlers are fired whenever a request to the dongle is denied (connect/disconnect/autoconnect). Expects handlers with the prototype `my_function(headset)` and passes in the current headset object.\r\n\r\n`headset.` **scanning_handlers** `[]` - Handlers are fired whenever the dongle begins scanning for a headset. Expects handlers with the prototype `my_function(headset)` and passes in the current headset object.\r\n\r\n`headset.` **standby_handlers** `[]` - Handlers are fired whenever the dongle goes into standby (not connected to a headset). Expects handlers with the prototype `my_function(headset)` and passes in the current headset object.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}